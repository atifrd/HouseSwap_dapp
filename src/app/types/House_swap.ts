/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace HomeSwap {
  export type HouseStruct = {
    houseType: string;
    value: BigNumberish;
    link: string;
    propietary: AddressLike;
  };

  export type HouseStructOutput = [
    houseType: string,
    value: bigint,
    link: string,
    propietary: string
  ] & { houseType: string; value: bigint; link: string; propietary: string };

  export type OfferStruct = {
    house: HomeSwap.HouseStruct;
    targetUser: AddressLike;
    amountPayOriginToTarget: BigNumberish;
    amountPayTargetToOrigin: BigNumberish;
  };

  export type OfferStructOutput = [
    house: HomeSwap.HouseStructOutput,
    targetUser: string,
    amountPayOriginToTarget: bigint,
    amountPayTargetToOrigin: bigint
  ] & {
    house: HomeSwap.HouseStructOutput;
    targetUser: string;
    amountPayOriginToTarget: bigint;
    amountPayTargetToOrigin: bigint;
  };

  export type SwapStruct = {
    origin: HomeSwap.HouseStruct;
    target: HomeSwap.HouseStruct;
    amountPayOriginToTarget: BigNumberish;
    amountPayTargetToOrigin: BigNumberish;
  };

  export type SwapStructOutput = [
    origin: HomeSwap.HouseStructOutput,
    target: HomeSwap.HouseStructOutput,
    amountPayOriginToTarget: bigint,
    amountPayTargetToOrigin: bigint
  ] & {
    origin: HomeSwap.HouseStructOutput;
    target: HomeSwap.HouseStructOutput;
    amountPayOriginToTarget: bigint;
    amountPayTargetToOrigin: bigint;
  };
}

export interface House_swapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOffer"
      | "addOffer"
      | "deposit"
      | "initialized"
      | "performSwap"
      | "getStatus"
      | "info"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BalanceUpdated" | "NewOffer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [AddressLike, HomeSwap.HouseStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addOffer",
    values: [HomeSwap.HouseStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values: [HomeSwap.HouseStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "performSwap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getStatus", values?: undefined): string;
  encodeFunctionData(functionFragment: "info", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
}

export namespace BalanceUpdatedEvent {
  export type InputTuple = [arg0: AddressLike, arg1: BigNumberish];
  export type OutputTuple = [arg0: string, arg1: bigint];
  export interface OutputObject {
    arg0: string;
    arg1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewOfferEvent {
  export type InputTuple = [offer: HomeSwap.OfferStruct];
  export type OutputTuple = [offer: HomeSwap.OfferStructOutput];
  export interface OutputObject {
    offer: HomeSwap.OfferStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface House_swap extends BaseContract {
  connect(runner?: ContractRunner | null): House_swap;
  waitForDeployment(): Promise<this>;

  interface: House_swapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOffer: TypedContractMethod<
    [
      _targetUser: AddressLike,
      house: HomeSwap.HouseStruct,
      amountPayOriginToTarget: BigNumberish,
      amountPayTargetToOrigin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  addOffer: TypedContractMethod<
    [
      house: HomeSwap.HouseStruct,
      amountPayOriginToTarget: BigNumberish,
      amountPayTargetToOrigin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<[], [void], "payable">;

  initialized: TypedContractMethod<
    [house: HomeSwap.HouseStruct],
    [void],
    "nonpayable"
  >;

  performSwap: TypedContractMethod<[], [void], "nonpayable">;

  getStatus: TypedContractMethod<[], [bigint], "view">;

  info: TypedContractMethod<[], [HomeSwap.SwapStructOutput], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOffer"
  ): TypedContractMethod<
    [
      _targetUser: AddressLike,
      house: HomeSwap.HouseStruct,
      amountPayOriginToTarget: BigNumberish,
      amountPayTargetToOrigin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addOffer"
  ): TypedContractMethod<
    [
      house: HomeSwap.HouseStruct,
      amountPayOriginToTarget: BigNumberish,
      amountPayTargetToOrigin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "initialized"
  ): TypedContractMethod<[house: HomeSwap.HouseStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "performSwap"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getStatus"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "info"
  ): TypedContractMethod<[], [HomeSwap.SwapStructOutput], "view">;

  getEvent(
    key: "BalanceUpdated"
  ): TypedContractEvent<
    BalanceUpdatedEvent.InputTuple,
    BalanceUpdatedEvent.OutputTuple,
    BalanceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NewOffer"
  ): TypedContractEvent<
    NewOfferEvent.InputTuple,
    NewOfferEvent.OutputTuple,
    NewOfferEvent.OutputObject
  >;

  filters: {
    "BalanceUpdated(address,uint256)": TypedContractEvent<
      BalanceUpdatedEvent.InputTuple,
      BalanceUpdatedEvent.OutputTuple,
      BalanceUpdatedEvent.OutputObject
    >;
    BalanceUpdated: TypedContractEvent<
      BalanceUpdatedEvent.InputTuple,
      BalanceUpdatedEvent.OutputTuple,
      BalanceUpdatedEvent.OutputObject
    >;

    "NewOffer(tuple)": TypedContractEvent<
      NewOfferEvent.InputTuple,
      NewOfferEvent.OutputTuple,
      NewOfferEvent.OutputObject
    >;
    NewOffer: TypedContractEvent<
      NewOfferEvent.InputTuple,
      NewOfferEvent.OutputTuple,
      NewOfferEvent.OutputObject
    >;
  };
}
